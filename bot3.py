import json
import os
from datetime import date, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = "7822163888:AAE7-SSSDO7NjL6ka65gKXg9nF6e7UVyX2o"
DATA_FILE = "pushups.json"
ADMIN_ID = 1983548472
PUSHUP_DAILY_LIMIT = 1000

# === –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ ===

def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def cleanup_old(data, keep_days=30):
    cutoff = date.today() - timedelta(days=keep_days)
    for rec in data.values():
        rec["daily"] = {d: c for d, c in rec.get("daily", {}).items() if date.fromisoformat(d) >= cutoff}

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
MAIN_KB = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üí™ Push‚Äëup")],
        [KeyboardButton("üôã‚Äç‚ôÇÔ∏è –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"), KeyboardButton("üìä –¢–æ–ø‚Äë–¥–µ–Ω—å")],
        [KeyboardButton("üèÜ –¢–æ–ø‚Äë–≤—Å—ë –≤—Ä–µ–º—è")],
    ], resize_keyboard=True
)

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ë–æ—Ç –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –¥–µ–Ω—å –ø–µ—Ä–≤—ã–π https://t.me/+ULGBBuDQd2kzNjZi üèãÔ∏èüî•\n"
        "–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n\n"
        "–ü–æ–∫–∞ —á—Ç–æ —è —É–º–µ—é —Ç–æ–ª—å–∫–æ —ç—Ç–æ, –Ω–æ –±—É–¥—É —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è:\n"
        "üì• /pushup  ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π\n"
        "üôã‚Äç‚ôÇÔ∏è /me ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "üìä /stats ‚Äî —Ç–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "üèÜ /alltime –¢–æ–ø‚Äë–≤—Å—ë –≤—Ä–µ–º—è",
        reply_markup=MAIN_KB,
    )


# --- pushup helper ---
async def add_pushups(update, context, add):
    user = update.effective_user
    uid = str(user.id)
    data = load_data(); cleanup_old(data)

    today = date.today().isoformat()
    rec = data.setdefault(uid, {"name": user.full_name, "daily": {}, "total": 0})
    today_cnt = rec["daily"].get(today, 0)
    available = PUSHUP_DAILY_LIMIT - today_cnt
    if available <= 0:
        await update.message.reply_text(f"üö´ –õ–∏–º–∏—Ç {PUSHUP_DAILY_LIMIT} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
        return
    if add > available:
        add = available
    rec["daily"][today] = today_cnt + add
    rec["total"] += add
    save_data(data)
    txt = f"–î–æ–±–∞–≤–ª–µ–Ω–æ {add}! –°–µ–≥–æ–¥–Ω—è {rec['daily'][today]}/{PUSHUP_DAILY_LIMIT}"
    if add < available:
        txt += " (–¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç)"
    await update.message.reply_text(txt)

# --- –∫–æ–º–∞–Ω–¥—ã ---
async def pushup(update: Update, context: ContextTypes.DEFAULT_TYPE):   # ‚Üê –±—ã–ª–æ pushup_cmd
    try:
        add = int(context.args[0])
    except (IndexError, ValueError):
        await update.message.reply_text("–£–∫–∞–∂–∏ —á–∏—Å–ª–æ: /pushup 25")
        return
    await add_pushups(update, context, add)

async def me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    data = load_data(); cleanup_old(data)
    rec = data.get(uid)
    today = date.today().isoformat()
    if not rec:
        await update.message.reply_text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞.")
        return
    today_cnt = rec["daily"].get(today, 0)
    await update.message.reply_text(f"–°–µ–≥–æ–¥–Ω—è: {today_cnt}/{PUSHUP_DAILY_LIMIT}\n–í—Å–µ–≥–æ: {rec['total']}")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE, today_only=False):
    data = load_data()
    cleanup_old(data)

    if not data:
        await update.message.reply_text("–ü–æ–∫–∞ –ø—É—Å—Ç–æ üò¥")
        return

    if today_only:
        today = date.today().isoformat()
        board = [(rec["name"], rec.get("daily", {}).get(today, 0)) for rec in data.values()]
        title = "üìä –¢–æ–ø –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º total –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ count
        board = [(rec["name"], rec.get("total", rec.get("count", 0))) for rec in data.values()]
        title = "üèÜ –¢–æ–ø –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è"

    board = sorted(board, key=lambda x: x[1], reverse=True)
    msg = f"{title}:\n\n"
    for i, (name, cnt) in enumerate(board, 1):
        msg += f"{i}. {name}: {cnt}\n"

    await update.message.reply_text(msg)


async def reset_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–∞–≤ ‚ùå"); return
    if update.message.reply_to_message:
        target = str(update.message.reply_to_message.from_user.id)
    elif context.args:
        target = context.args[0]
    else:
        await update.message.reply_text("/reset_user <id> –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º.")
        return
    data = load_data()
    if target in data:
        del data[target]; save_data(data)
        await update.message.reply_text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞ üóë")
    else:
        await update.message.reply_text("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤ ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().lower().replace("\u200d", "").replace("‚Äë", "-")

    if "push" in text:
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π –¥–æ–±–∞–≤–∏—Ç—å?")
        context.user_data["await_pushup"] = True
        return

    if context.user_data.get("await_pushup"):
        if text.isdigit():
            await add_pushups(update, context, int(text))
        else:
            await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        context.user_data["await_pushup"] = False
        return

    if "–ø—Ä–æ–≥—Ä–µ—Å—Å" in text or text == "/me":
        await me(update, context)
    elif "—Å–µ–≥–æ–¥–Ω—è" in text or "—Ç–æ–ø-–¥–µ–Ω—å" in text or "üìä" in text or text == "/today":
        await stats(update, context, today_only=True)
    elif "–≤—Å—ë –≤—Ä–µ–º—è" in text or "—Ç–æ–ø-–≤—Å—ë" in text or "üèÜ" in text or text == "/alltime":
        await stats(update, context, today_only=False)
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª ü§ñ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

# === –ó–∞–ø—É—Å–∫ ===

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("pushup", pushup))
    app.add_handler(CommandHandler("me", me))
    app.add_handler(CommandHandler("today", lambda u, c: stats(u, c, today_only=True)))
    app.add_handler(CommandHandler("alltime", lambda u, c: stats(u, c, today_only=False)))
    app.add_handler(CommandHandler("reset_user", reset_user))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    app.run_polling()
if __name__ == "__main__":
    main()